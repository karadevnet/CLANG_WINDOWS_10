#include <iostream>
#include <iomanip>
//https://github.com/llvm/llvm-project
unsigned char c = 130; // 0 - 255 // 0xFF
unsigned char d = 10; // 0 - 255 // 0xFF
unsigned int e = 0; //	0 - 65535 // 0xFFF
unsigned int e2 = 10681; //	0 - 65535 // 0xFFF
unsigned int e3 = 31885; //	0 - 65535 // 0xFFF

unsigned int array_new_line = 0; //	0 - 65535 // 0xFFF
unsigned int array_count = 0; //	0 - 65535 // 0xFFF

unsigned int array_random[1024] = {
	0x05, 0x4D, 0x24, 0x1E, 0x5B, 0xB4, 0x9E, 0x12, 0x86, 0xD3, 0xFB, 0xA7, 0xD4, 0x04, 0xE5, 0x45, 
	0x49, 0x19, 0x06, 0xCA, 0xF0, 0x7D, 0xE9, 0x0B, 0xEE, 0xCB, 0x20, 0x4D, 0xC9, 0xE0, 0xCE, 0x17, 
	0xEB, 0xB9, 0x2A, 0x91, 0x64, 0xA5, 0xA5, 0x47, 0x44, 0x96, 0xBA, 0x1F, 0x3D, 0xA4, 0xA3, 0xC5, 
	0x59, 0x03, 0x62, 0xEB, 0xDF, 0x06, 0xF1, 0x08, 0xCF, 0xEA, 0x80, 0x85, 0x89, 0x8D, 0x06, 0x95, 
	0x79, 0x36, 0xA3, 0xFD, 0xE7, 0x2D, 0x8F, 0xA2, 0x53, 0xC2, 0x81, 0xAD, 0xD9, 0xEB, 0xEE, 0x7B, 
	0x9D, 0xB3, 0x75, 0xC7, 0x49, 0x17, 0x49, 0xB7, 0xF2, 0x0D, 0x98, 0xB7, 0x16, 0xCE, 0x1D, 0x4C, 
	0x78, 0xA5, 0x61, 0x55, 0x09, 0xD5, 0x6D, 0x5C, 0x24, 0x5F, 0xD9, 0xE4, 0xDB, 0xB8, 0x83, 0xE9, 
	0x06, 0xB7, 0x62, 0xEB, 0x52, 0x45, 0x34, 0x4C, 0xA6, 0xA3, 0x04, 0xCD, 0x63, 0x4D, 0xBD, 0x78, 
	0x7C, 0xBF, 0x56, 0x3F, 0x6C, 0xBC, 0x35, 0x1C, 0x68, 0xC9, 0xF0, 0x89, 0x7A, 0xFF, 0x7E, 0x88, 
	0x43, 0x71, 0x6E, 0x9B, 0xA2, 0xB8, 0xD8, 0x68, 0x80, 0x75, 0x03, 0xE6, 0x6A, 0xC5, 0xFA, 0x4B, 
	0xDA, 0x0F, 0x9C, 0x18, 0x3C, 0x93, 0xC0, 0x02, 0x17, 0xB0, 0x98, 0x94, 0xF0, 0xC5, 0x62, 0xC1, 
	0xCF, 0x16, 0x05, 0xC9, 0x66, 0x2D, 0x41, 0x24, 0x59, 0x9B, 0x78, 0x55, 0x29, 0x09, 0x47, 0xEA, 
	0xAC, 0xF2, 0x70, 0xEF, 0x28, 0xA0, 0xCB, 0x9E, 0x69, 0x1A, 0x46, 0x31, 0x7E, 0x27, 0x15, 0xF4, 
	0xE5, 0xAD, 0xB5, 0x23, 0x4E, 0xF1, 0x5F, 0x0C, 0x4D, 0x85, 0xEC, 0xA0, 0x9F, 0xFB, 0x7B, 0x6F, 
	0xCE, 0x9E, 0x32, 0x88, 0x5F, 0xBD, 0xF8, 0xF8, 0xDE, 0x5D, 0x14, 0xC0, 0x66, 0x52, 0xE1, 0x76, 
	0x84, 0x18, 0x32, 0x03, 0x8C, 0xEA, 0x05, 0x1F, 0xBC, 0xF5, 0x8C, 0x82, 0xD1, 0x97, 0xD3, 0xE5, 
	0xE2, 0x1A, 0x67, 0x5B, 0x9A, 0x59, 0xCC, 0x8B, 0x39, 0x27, 0xC0, 0xD7, 0xEE, 0x89, 0x75, 0x8A, 
	0x70, 0x05, 0x52, 0x7B, 0xD9, 0x90, 0xE8, 0xD2, 0x4B, 0x01, 0x26, 0xE8, 0xCA, 0xE8, 0xEF, 0x50, 
	0x4F, 0x41, 0xB7, 0x93, 0x12, 0x74, 0xAF, 0x43, 0x7F, 0x78, 0xAB, 0x3F, 0x63, 0x24, 0xE3, 0x6F, 
	0x2F, 0xF8, 0x0F, 0x52, 0x72, 0xED, 0xA6, 0x0F, 0xE2, 0x14, 0x2D, 0xF7, 0x96, 0x10, 0xD4, 0xA2, 
	0x3C, 0xC1, 0xF0, 0x10, 0x83, 0xA4, 0xF0, 0x82, 0xFA, 0xA3, 0xDC, 0xF2, 0x12, 0x8D, 0xA1, 0x52, 
	0x0E, 0x4F, 0x89, 0x01, 0x16, 0xA3, 0xBE, 0x30, 0xAF, 0xEB, 0xB9, 0x05, 0x45, 0x42, 0xEA, 0xC5, 
	0x98, 0x21, 0x04, 0x65, 0x32, 0x14, 0xBF, 0x20, 0x3C, 0x53, 0xFC, 0x24, 0x4F, 0x43, 0x89, 0x56, 
	0x1C, 0x34, 0x02, 0xB5, 0x09, 0xE5, 0x91, 0x05, 0x22, 0x9A, 0x88, 0x9B, 0xED, 0xC7, 0xFC, 0x98, 
	0x15, 0xB3, 0x04, 0xD9, 0xE3, 0x81, 0x32, 0x65, 0x15, 0x82, 0x59, 0x37, 0x70, 0xD8, 0xD9, 0x92, 
	0x2C, 0xA8, 0xDF, 0x51, 0x13, 0x7A, 0x69, 0xD2, 0xED, 0x86, 0xF7, 0x79, 0xA7, 0xFE, 0x3C, 0xEA, 
	0x26, 0xA7, 0x2B, 0x69, 0xE1, 0x3D, 0x41, 0x11, 0x9A, 0x82, 0xE4, 0xC5, 0xD1, 0xF4, 0x35, 0x14, 
	0xD5, 0x83, 0xAE, 0x6A, 0x80, 0xBF, 0x6F, 0x50, 0x0C, 0x6A, 0x0C, 0x91, 0x8F, 0x57, 0x3D, 0x81, 
	0x07, 0xFA, 0xD5, 0xC4, 0xF9, 0x2F, 0xC9, 0x55, 0x28, 0xF6, 0x34, 0x99, 0xD1, 0x53, 0xA1, 0xD6, 
	0x74, 0x6C, 0x1D, 0x49, 0x20, 0xA3, 0xB3, 0xAB, 0xB8, 0x55, 0x6C, 0x0B, 0xC7, 0x56, 0xF6, 0x16, 
	0xB4, 0x81, 0x84, 0x4F, 0x7E, 0xCE, 0x8E, 0xD6, 0x5C, 0xD7, 0x81, 0xB6, 0xD3, 0xC1, 0x88, 0xCF, 
	0x29, 0xE1, 0xFC, 0xEB, 0x47, 0xAA, 0x2A, 0x82, 0x75, 0xA7, 0x65, 0x40, 0x74, 0x94, 0xC6, 0x56, 
	0xEF, 0xE1, 0xDB, 0x1F, 0x46, 0x2B, 0x33, 0xB0, 0x1A, 0x72, 0xA9, 0x4F, 0x3D, 0x23, 0xB9, 0xE6, 
	0xD4, 0x34, 0x46, 0x04, 0xCD, 0xEC, 0xA7, 0xEA, 0x05, 0x1A, 0xE6, 0xBE, 0xBE, 0xBF, 0x6D, 0xE1, 
	0x3F, 0x98, 0xA4, 0x01, 0xA9, 0xE6, 0x42, 0x71, 0x86, 0x66, 0x30, 0xCC, 0x7B, 0x6E, 0x65, 0xF4, 
	0x21, 0x8A, 0x12, 0xF6, 0x0E, 0x17, 0xE9, 0x6C, 0x71, 0xB4, 0x83, 0x4A, 0xD3, 0x96, 0x0D, 0x4E, 
	0xEA, 0xF3, 0xCB, 0x74, 0x87, 0x36, 0x27, 0x1B, 0x0D, 0xA8, 0x39, 0xCB, 0xFA, 0xAE, 0x23, 0xCA, 
	0x78, 0xDB, 0xA0, 0xDF, 0xEA, 0x66, 0x8E, 0x03, 0x06, 0xD7, 0x73, 0xD8, 0xE3, 0xEF, 0x2F, 0x25, 
	0x01, 0x17, 0x62, 0xAC, 0x42, 0xE3, 0x34, 0x23, 0x5C, 0x80, 0x8E, 0x1D, 0x31, 0x03, 0xED, 0x2A, 
	0x0A, 0xF6, 0x53, 0x8A, 0xC4, 0xB1, 0x1A, 0x1F, 0x54, 0x35, 0x92, 0x95, 0x25, 0xB3, 0xC0, 0xE3, 
	0x53, 0xFA, 0x9B, 0x91, 0xBF, 0x4D, 0x9E, 0x73, 0x66, 0x8B, 0x9F, 0xC4, 0x93, 0x9E, 0x22, 0xCB, 
	0xC9, 0x7D, 0xB2, 0x78, 0x86, 0x5E, 0xF1, 0xA3, 0x30, 0xD1, 0x60, 0xDE, 0xCE, 0xDF, 0x11, 0xFA, 
	0x76, 0x68, 0xD1, 0xBE, 0x68, 0x64, 0x80, 0x6B, 0x62, 0xB9, 0x7B, 0xFB, 0x9C, 0xC6, 0x82, 0x59, 
	0x6F, 0xE3, 0x67, 0xE0, 0x9B, 0x69, 0x63, 0xEA, 0xB1, 0x0A, 0x01, 0x46, 0x20, 0x83, 0xD3, 0xCE, 
	0xC4, 0x01, 0x81, 0x84, 0x2C, 0xAF, 0xD4, 0xDB, 0xC8, 0x4F, 0xDA, 0x2E, 0xCC, 0xD6, 0x36, 0x72, 
	0x75, 0x73, 0x41, 0xAB, 0xF1, 0x63, 0x9C, 0xBE, 0x36, 0x8A, 0x3C, 0x94, 0x58, 0xC4, 0x22, 0xB9, 
	0x5B, 0x38, 0x4A, 0xE4, 0x7C, 0x48, 0x7E, 0x0B, 0x5A, 0xE3, 0x14, 0xFD, 0xA6, 0x3F, 0xC5, 0xAA, 
	0x1D, 0x4A, 0x32, 0x77, 0xFF, 0x6E, 0xB0, 0x5F, 0x5D, 0x57, 0x7C, 0xC1, 0xBC, 0xDB, 0x77, 0x09, 
	0x1C, 0x53, 0xF1, 0x97, 0x4E, 0xDC, 0x43, 0xB3, 0x19, 0x64, 0x28, 0x3E, 0xAF, 0x80, 0x21, 0x88, 
	0x67, 0x59, 0x52, 0x95, 0xBC, 0x43, 0x96, 0x82, 0x0C, 0xC4, 0xD3, 0xFE, 0x96, 0x15, 0xB4, 0xFB, 
	0xAB, 0x6F, 0x60, 0x0A, 0x1C, 0xAD, 0xCA, 0x03, 0x4A, 0x12, 0xB6, 0xF7, 0x75, 0x33, 0x9A, 0x86, 
	0x1E, 0x65, 0xDB, 0x0B, 0xA4, 0x2E, 0x2A, 0x4F, 0x6B, 0x7E, 0xF2, 0xAC, 0x32, 0xD2, 0x1E, 0xC9, 
	0x73, 0x7A, 0xA3, 0x5A, 0xE4, 0x92, 0xA2, 0x9B, 0x79, 0x80, 0x06, 0x67, 0x84, 0x01, 0xE6, 0x15, 
	0xCB, 0x09, 0x2C, 0x92, 0xB5, 0x0F, 0x2B, 0x62, 0xE5, 0x82, 0x34, 0x63, 0xE1, 0x89, 0x5C, 0x99, 
	0xA2, 0x39, 0xEA, 0x5C, 0x29, 0xF3, 0x3C, 0x94, 0x74, 0x97, 0xFF, 0xFD, 0x71, 0xA9, 0x20, 0x96, 
	0xBF, 0xB0, 0xC7, 0x99, 0x76, 0x58, 0x3B, 0xCA, 0x2E, 0x24, 0x92, 0xEB, 0xF8, 0xC0, 0x7A, 0x8A, 
	0x28, 0x42, 0x8C, 0x97, 0xEF, 0xCF, 0xEC, 0x76, 0x4F, 0x93, 0x32, 0x60, 0xD1, 0xFF, 0xC6, 0x62, 
	0x0D, 0x9E, 0x54, 0x40, 0xED, 0x13, 0xE2, 0x0D, 0x38, 0x08, 0xAC, 0x46, 0xD1, 0x17, 0xE8, 0xAB, 
	0xBB, 0x02, 0xFE, 0x48, 0xC2, 0xB7, 0xED, 0x3F, 0x5E, 0x06, 0xCD, 0x67, 0x42, 0xE9, 0xBA, 0xC2, 
	0x8C, 0xE6, 0x9D, 0x5D, 0xA7, 0xDA, 0x8D, 0x22, 0x3B, 0x29, 0xC7, 0xA3, 0xC8, 0x3C, 0x7B, 0x03, 
	0xD4, 0xB5, 0xE0, 0x5C, 0xAF, 0xD2, 0x5D, 0x62, 0x3C, 0xD2, 0xA9, 0x1E, 0x60, 0x63, 0x43, 0xF7, 
	0xD7, 0x73, 0x90, 0x7B, 0xB3, 0xDF, 0x88, 0x74, 0xB4, 0xD6, 0xCA, 0x6B, 0x3F, 0xF4, 0x6C, 0x8A, 
	0xB2, 0x72, 0xF2, 0x79, 0x48, 0xDA, 0x3A, 0xC4, 0xC8, 0x31, 0x3E, 0xC5, 0xCE, 0x7A, 0x0A, 0x34, 
	0x50, 0x02, 0x41, 0xD5, 0xA6, 0xE5, 0x09, 0xE5, 0x65, 0xB1, 0x41, 0x38, 0x99, 0x1B, 0x55, 0x2E
};

float ee_result = 0;



using namespace std;
// unsigned int
// int
// double
// long
// long double

//use unsigned int value = c * d ;

// IF YOUR CODE HAVE An ERROR COMPILER WILL GIVE
// ERRROR MESSAGE !! LIKE EXAMPLE BELLOW
// AFTER SUCCESS COMPILING USE main.bat FILE
// TO START PROGRAM USING main.bat FILE WILL
// RUN PROGRAM WITH STAY OPEN CMD WINDOW
// TO SHOW RESULT OF PROGRAM

int main()
{
	/*
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	*/
	
	while(ee_result <= 9000)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	cout << "\n\n\n";
	ee_result = 0;
	
	cout << "\nPRESS < ENTER > TO CONTUNE\n\n";
	system("pause");
	
	while(array_count <= 1023)
	{
		cout << array_count << " " << array_random[array_count] << " ";
		//cout << hex << setfill('0') << setw(2) << ar[i] << " ";
		if(array_new_line == 16)
		{
			cout << "\n"; array_new_line= 0;
		}
		
		array_count+= 1;
		array_new_line+= 1;
		
	}
	cout << "\n\n";
	array_count = 0;
	
	while(array_count <= 1023)
	{
		//cout << array_count << " " << array_random[array_count] << " ";
		cout << hex << setfill('0') << setw(2) << array_random[array_count] << " ";
		if(array_new_line == 16)
		{
			cout << "\n"; array_new_line= 0;
		}
		
		array_count+= 1;
		array_new_line+= 1;
		
	}
	cout << "\n\n";
	array_count = 0;
	
	cout << "\nPRESS < ENTER > TO CONTUNE\n\n";
	system("pause");
	
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	cout << "\nget sum e = c * d";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE\n";
	
	while(ee_result <= 9000)
	{
		cout << ee_result << " ";
		ee_result+= 2;
		cout << "\nNEW MESSAGE\n";
	}
	cout << "\n";
	ee_result = 0;
	
	cout << "\nNEW MESSAGE EDIT CPP FILE CODE CONVERTED TO CPP TEST SOFTWARE";
	cout << "\nget sum e = c * d";
	
	
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	cout << "\n";
	ee_result = 0;
	
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	
	ee_result = 0;
	cout << "\n";
	
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 2;
	}
	ee_result = 0;
	cout << "\n";
	
	
	
	
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	cout << "\nNEW MESSAGE EDIT CPP FILE";
	cout << "\nget sum e = c * d";
	
	
	cout << "c = "; cout << c; cout << "\n";
	
	cout << "d = "; cout << d; cout << "\n";
  
	e = c * d; // <<< value DDD not registered !!!
	
	cout << "e = "; cout << e;
	
	cout << "\n"; //cout << "\n";
	
	cout << "\nget multiply ee_result = e2 * e3";
	
	cout << "e2 = "; cout << e2; cout << "\n";
	
	cout << "e3 = "; cout << e3; cout << "\n";
	
	ee_result = e2 * e3;
	
	cout << "ee_result = "; cout << ee_result;
	
	cout << "\n"; //cout << "\n";
	
	cout << "\nPRESS < ENTER > TO FINISH\n\n";
	
	
	cout << "\n\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 1;
	}
	ee_result = 0;
	cout << "\n\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 1;
	}
	ee_result = 0;
	cout << "\n\n";
	
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 1;
	}
	ee_result = 0;
	cout << "\n\n";
	while(ee_result <= 100)
	{
		cout << ee_result << " ";
		ee_result+= 1;
	}
	ee_result = 0;
	cout << "\n\n";
	
	
	// use this line for pause program before exit
	system("pause");
	
	// or use thise two lines to stay program open
	//int x, y;
    //std::cin >> x >> y;
	
  return 0;

} // END MAIN