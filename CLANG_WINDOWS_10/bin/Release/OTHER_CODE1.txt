   
      
            /*
            await Task.Delay(5000).ContinueWith(t =>
            {
                //System.Diagnostics.Process.Start("cmd.exe", "/K " + command_compiler);
                //System.Diagnostics.Process.Start("cmd.exe", "/K dir " + exe_path);
                //System.Diagnostics.Process.Start("cmd.exe", "/K dir " + exe_path);
                if (!File.Exists(@"main.exe"))
                {
                    label2.Text = "";
                    label2.BackColor = Color.Red;
                    label2.Text = "!!! ERROR !!! FILE COMPILED NOT OK = main.exe !!!";
                    timer1.Stop();
                }

                if (File.Exists(@"main.exe"))
                {
                    label2.Text = "";
                    label2.BackColor = Color.LimeGreen;
                    label2.Text = "FILE COMPILED OK = main.exe";
                    timer1.Stop();
                }


                //timer1.Stop();
            });
            */


            /*
            Process process = new Process();
            process.StartInfo.FileName = "cmd.exe";
            process.StartInfo.Arguments = "/K clang++ -o main.exe main.cpp";
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.CreateNoWindow = true;
            
            process.Start(); // strat the process exactly from here
            
             // Create tasks for output and error streams
             Task outputTask = Task.Run(async () =>
             {
                 using (StreamReader reader = process.StandardOutput)
                 {
                     while (!reader.EndOfStream)
                     {
                         string output = await reader.ReadLineAsync();

                         richTextBox1.Invoke(new Action(() =>
                         {
                             richTextBox1.AppendText(output + "\n");
                             richTextBox1.ScrollToCaret();
                         }));
                     }
                 }
             });

             Task errorTask = Task.Run(async () =>
             {
                 using (StreamReader reader = process.StandardError)
                 {
                     while (!reader.EndOfStream)
                     {
                         string errorOutput = await reader.ReadLineAsync();

                         richTextBox1.Invoke(new Action(() =>
                         {
                             richTextBox1.AppendText("ERROR: " + errorOutput + "\n");
                             richTextBox1.ScrollToCaret();
                         }));
                     }
                 }
             });

             await Task.WhenAll(outputTask, errorTask);
             await Task.Run(() => process.WaitForExit());
            */


	  private void button1_Click(object sender, EventArgs e)
        {       //button1 = compile the file
            
            timer1.Interval = 1000; // 1 second
            timer1.Start();

            if (File.Exists(@"main.exe"))
            {
                string command_delete_exe = "del main.exe";
                System.Diagnostics.Process.Start("cmd.exe", "/C " + command_delete_exe);
            }
            while (File.Exists(@"main.exe"))
            {
                // wait for the file to be deleted
                System.Threading.Thread.Sleep(1000);
            }

            if (File.Exists(@"main.cpp"))
            {
                label2.BackColor = Color.LimeGreen;
                label2.Text = "FOUND FILE = main.cpp AND COMPILING IS STARTED";
                //string path = @"C:\msys64\mingw64\bin";
                string fileName = @"main.cpp";
                //string filePath = Path.Combine(path, fileName);
                string command_compiler = "clang++ -o main.exe main.cpp";// + fileName;// + fileName;
                //System.Diagnostics.Process.Start("cmd.exe", "/K " + command_compiler);
                richTextBox1.AppendText(command_compiler + "\n");

                Process process = new Process();
                process.StartInfo.FileName = "cmd.exe";
                process.StartInfo.Arguments = "/C some-command";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.CreateNoWindow = true;

                process.Start();

                await ReadProcessOutput(process.StandardOutput); // Call the method asynchronously
                process.WaitForExit();

                //string correctingPath_PROGRAM_FILES = "C:\\Path\\To\\Your\\Compiler";
                
                // Pass a delegate that updates the RichTextBox
                richTextBox1.AppendText("COMPILING main.c AND initcpu.c PROJECT STARTED\n");
                Process process = new Process();
                process.StartInfo.FileName = "cmd.exe";
                process.StartInfo.Arguments = "/K " + command_compiler;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.RedirectStandardInput = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                
                // Synchronously read the standard output of the spawned process.
                StreamReader reader_output = process.StandardOutput;
                StreamWriter reader_input = process.StandardInput;
                string output = "";
                

                //richTextBox1.AppendText(Test_Process_Out(command_compiler));

                
                while (!reader_output.EndOfStream)
                {
                    output = reader_output.ReadLineAsync().ToString(); // Avoid blocking with .Result

                    if (output == null) // End of stream condition
                    {
                        break;
                    }

                    //richTextBox1.Invoke(new Action(() =>
                    //{
                        richTextBox1.AppendText(output + "\n");
                        richTextBox1.ScrollToCaret();
                    //}));
                }

                

            }
            else if (File.Exists(@"main.c"))
            {
                label2.BackColor = Color.LimeGreen;
                label2.Text = "FOUND FILE = main.c AND COMPILING IS STARTED";
                //string path = @"C:\msys64\mingw64\bin";
                string fileName = @"main.c";
                //string filePath = Path.Combine(path, fileName);
                string command_compiler = "clang -o main.exe " + fileName;
                System.Diagnostics.Process.Start("cmd.exe", "/K " + command_compiler);
            }
            else
            {
                label2.Font = new Font(label2.Font.FontFamily, 18);
                label2.ForeColor = Color.Yellow;
                label2.BackColor = Color.Red;
                label2.Text = "FILE NOT FOUND = main.cpp OR FILE = main.cpp";
                //MessageBox.Show("File not found: main.cpp");
            }

            if (File.Exists(@"main.c") && File.Exists(@"main.cpp"))
            {
                label2.Font = new Font(label2.Font.FontFamily, 14);
                //label2.ForeColor = Color.Black;
                label2.BackColor = Color.Red;
                label2.Text = "FILE BOTH FOUND = main.cpp + main.c !!!!\n" +
                    "REMOVE OR RENAME ONE !!!";
                //MessageBox.Show("File not found: main.cpp");
                button1.Enabled = false;
            }
            else if (!File.Exists(@"main.c") && !File.Exists(@"main.cpp"))
            {
                label2.Font = new Font(label2.Font.FontFamily, 18);
                label2.ForeColor = Color.Yellow;
                label2.BackColor = Color.Red;
                label2.Text = "FILE NOT FOUND = main.cpp OR FILE = main.cpp";
                button1.Enabled = false;
            }
            
                      // wait for 5 seconds
            Task.Delay(5000).ContinueWith(t =>
            {
                //System.Diagnostics.Process.Start("cmd.exe", "/K " + command_compiler);
                //System.Diagnostics.Process.Start("cmd.exe", "/K dir " + exe_path);
                //System.Diagnostics.Process.Start("cmd.exe", "/K dir " + exe_path);
                if (!File.Exists(@"main.exe"))
                {
                    label2.Text = "";
                    label2.BackColor = Color.Red;
                    label2.Text = "!!! ERROR !!! FILE COMPILED NOT OK = main.exe !!!";
                    timer1.Stop();
                }

                if (File.Exists(@"main.exe"))
                {
                    label2.Text = "";
                    label2.BackColor = Color.LimeGreen;
                    label2.Text = "FILE COMPILED OK = main.exe";
                    timer1.Stop();
                }


                //timer1.Stop();
            });
          
        }